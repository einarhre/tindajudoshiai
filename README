HOW TO MAKE A BUILD

Linux and Windows are the supported operating systems.

Development work is done in Linux environment. For Windows users it is recommended
to install VirtualBox + Ubuntu (32 bit) for compilation. Learn how to use
Linux terminal and line commands. Everything below after the $ sign 
is typed in a terminal.

LibreOffice is needed for PDF creation. You should already have it,
but if not, get it with the following command:

$ sudo apt-get install libreoffice

"sudo" makes you have temporary root priviledges that are required for 
software installation. "apt-get install" fetches and installs software packages.

Install the basic development tools:

$ sudo apt-get install build-essential libgtk-3-dev bison flex gettext

You probably already have "build-essential" (compiler, linker). "gnome-devel"
contains everything needed for GTK+ graphical user interface development. 
"bison flex" are used for parsing text. "checkinstall" is required for Debian packages.

Next some libraries:

$ sudo apt-get install librsvg2-dev libao-dev libmpg123-dev libcurl4-openssl-dev libssh2-1-dev

For judoproxy:

$ sudo apt-get install libavcodec-dev libavformat-dev libavresample-dev libavutil-dev libswscale-dev
$ sudo apt-get install liblzma-dev libxml2-dev

Debian package creation requires Ruby and fpm:

$ sudo apt-get -y install ruby ruby-dev
$ sudo -E gem install fpm

You may have to update stuff first (Raspberry Pi):
$ sudo gem update --system

JudoShiai is under GIT in Sourceforge:

$ sudo apt-get install git

If you are behind a proxy you want to edit /home/$USER/.gitconfig

Get the JudoShiai software:

$ git clone http://git.code.sf.net/p/judoshiai/judoshiai

Change directory:

$ cd judoshiai

Compile:

$ make

Make a Debian package

$ make debian

You can find the result in judoshiai-code/release-linux.

----------------------------------------

To compile 32 bit applications in 64 bit environment you have to install 32 bit libraries:

sudo apt -y install pkg-config-i686-linux-gnu
sudo apt -y install libglib2.0-dev:i386
sudo apt -y install libcairo2-dev:i386
sudo apt -y install librsvg2-dev:i386
sudo apt -y install libgtk-3-dev:i386
sudo apt -y install libssh2-1-dev:i386
sudo apt -y install libcurl4-openssl-dev:i386
sudo apt -y install libao-dev:i386 libmpg123-dev:i386

Compile:
$ make TARGETOS=LINUX32

----------------------------------------

The key idea of the AppImage format is one app = one file. Every AppImage contains an app and all the files the app needs to run.
In other words, each AppImage has no dependencies other than what is included in the targeted base operating system(s).

appimage-builder is a tool for packaging other applications into AppImages.
https://appimage-builder.readthedocs.io/en/latest/intro/install.html

sudo apt install -y python3-pip python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace

sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
  or
sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage -O /usr/local/bin/appimagetool

sudo chmod +x /usr/local/bin/appimagetool
sudo pip3 install appimage-builder

Create:
$ make appimage

=======================================

There are three version for Windows:
- WinXP runs everywhere, but is slow.
- Win32 and Win64 are fast, but do not run in WinXP.

Cross compilation for Windows requires more software:

$ sudo apt-get install mingw32

Some programs need Windows emulator to run:

$ sudo apt-get install wine

There exist still lots of required libraries and run time DLL's that are not in
any package. Many DLL's have incompatible versions around and finding the correct one 
may take time. To make life easier you can fetch a ready made set of Windows XP software.
Get it using command line or your favorite browser:

$ wget http://judoshiai.sourceforge.net/win32-gtk3.tgz

Extract it under the /opt directory:

$ sudo tar xvzf win32-gtk3.tgz -C /opt

Win32 and Win64 use MXE:

git clone https://github.com/mxe/mxe.git
$ cd ~/mxe
$ make MXE_TARGETS='i686-w64-mingw32.shared x86_64-w64-mingw32.shared' gtk3 curl librsvg libao mpg123

Compilation will take time.

Start cross compilation:

$ make TARGETOS=WINXP
$ make TARGETOS=WIN32
$ make TARGETOS=WIN64

Make a package:

$ make setup TARGETOS=WINXP
$ make setup TARGETOS=WIN32
$ make setup TARGETOS=WIN64

Results will be in judoshiai-code/release-win{xp,32,64} directories.
Clean everything with commands

$ make clean
and
$ make clean TARGETOS=WINXP
$ make clean TARGETOS=WIN32
$ make clean TARGETOS=WIN64
